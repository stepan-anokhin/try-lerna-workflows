name: Canary Release
on:
  pull_request:
    types: [ opened, synchronize, labeled ]

jobs:
  release:
    runs-on: ubuntu-latest

    # Execute only for feature-branches with 'canary' label:
    if: (github.head_ref != 'master' && github.head_ref != 'staging' && github.head_ref != 'beta') && ((github.event.action == 'labeled' && github.event.label.name == 'canary') || contains(github.event.pull_request.labels.*.name, 'canary'))

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: "Setup NodeJS"
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: "Setup NPM"
        run: |
          npm ci
          npx lerna bootstrap -- --force-local
          npm set "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}"

      - name: "Make Canary Release"
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.CI_TOKEN }}@github.com/$GITHUB_REPOSITORY
          npm run release:canary

      - name: "Suggest Package Config"
        uses: actions/github-script@v6
        with:
          script: |
            // Get changed packages
            const execSync = require('child_process').execSync;
            const changed = JSON.parse(execSync("lerna ls --json --since origin/master --toposort", {encoding: "utf-8"})).reverse();
            
            // Create package config
            const featureBranch = context.payload.pull_request.head.ref;
            const packageConfig = changed.map((pkg) => ({
              name: pkg.name,
              version: pkg.version,
              namespace: "default",
              marketplaceScriptsBranch: "master",
              marketplacePackagesBranch: featureBranch,
            }))
            
            const config = {"<TENANT>": {packages: packageConfig} };
            console.log("Package config:");
            console.log(JSON.stringify(config, null, 2));
            
            // Find previous comment 
            const commentsResponse = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            const comments = commentsResponse.data;
            const previousComment = comments.find(comment => comment.user.login === "github-actions[bot]" && comment.body.startsWith("### Package Config\n"));
            
            // Update or create comment
            const body = `### Package Config\n\nAdd the following config to the \`atlan\` ConfigMap (e.g. by executing \`kubectl edit cm atlan\`):\n\`\`\`json\n${JSON.stringify(config, null, 2)}\n\`\`\`\n`;
            if (previousComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previousComment.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body,
              });
            }